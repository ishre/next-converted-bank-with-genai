// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(cuid())
  name              String
  email             String        @unique
  password          String
  role              UserRole      @default(USER)
  kycStatus         KycStatus     @default(PENDING)
  kycSubmittedAt    DateTime      @default(now())
  kycApprovedAt     DateTime?
  kycApprovedBy     String?
  kycRejectionReason String?
  createdAt         DateTime      @default(now())
  accounts          Account[]
  sentTransactions  Transaction[] @relation("TransactionSender")
  receivedTransactions Transaction[] @relation("TransactionReceiver")
}

enum UserRole {
  USER
  ADMIN
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

model Account {
  id           String        @id @default(cuid())
  userId       String
  balance      Decimal       @default(0) @db.Decimal(10, 2)
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  accountId   String
  type        String   // 'deposit', 'withdrawal', 'transfer'
  amount      Decimal  @db.Decimal(10, 2)
  description String?  // Optional description
  senderId    String?  // For transfers - who sent the money
  receiverId  String?  // For transfers - who received the money
  senderName  String?  // Sender's name for display
  receiverName String? // Receiver's name for display
  createdAt   DateTime @default(now())
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  sender      User?    @relation("TransactionSender", fields: [senderId], references: [id])
  receiver    User?    @relation("TransactionReceiver", fields: [receiverId], references: [id])
}
